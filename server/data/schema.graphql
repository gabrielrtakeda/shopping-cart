input AddTodoInput {
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge
  viewer: User
  clientMutationId: String
}

type Cart implements Node {
  """The ID of an object"""
  id: ID!
  items(after: String, first: Int, before: String, last: Int): CartItemConnection
  totalItemsQuantity: Int
  totalItemsPrice: Float
}

type CartItem implements Node {
  """The ID of an object"""
  id: ID!
  quantity: Int
  product: Product
}

"""A connection to a list of items."""
type CartItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CartItemEdge]
}

"""An edge in a connection."""
type CartItemEdge {
  """The item at the end of the edge"""
  node: CartItem

  """A cursor for use in pagination"""
  cursor: String!
}

type Category implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  products(after: String, first: Int, before: String, last: Int): ProductConnection
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge"""
  node: Category

  """A cursor for use in pagination"""
  cursor: String!
}

input ChangeTodoStatusInput {
  complete: Boolean!
  id: ID!
  clientMutationId: String
}

type ChangeTodoStatusPayload {
  todo: Todo
  viewer: User
  clientMutationId: String
}

input MarkAllTodosInput {
  complete: Boolean!
  clientMutationId: String
}

type MarkAllTodosPayload {
  changedTodos: [Todo]
  viewer: User
  clientMutationId: String
}

type Market implements Node {
  """The ID of an object"""
  id: ID!
  categories(after: String, first: Int, before: String, last: Int): CategoryConnection
  categoriesTotalCount: Int
  product(id: ID, after: String, first: Int, before: String, last: Int): Product
  products(categoryId: String = "all", after: String, first: Int, before: String, last: Int): ProductConnection
  cart: Cart
}

type Mutation {
  addTodo(input: AddTodoInput!): AddTodoPayload
  changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload
  markAllTodos(input: MarkAllTodosInput!): MarkAllTodosPayload
  removeCompletedTodos(input: RemoveCompletedTodosInput!): RemoveCompletedTodosPayload
  removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
  renameTodo(input: RenameTodoInput!): RenameTodoPayload
  removeProductFromCart(input: RemoveProductFromCartInput!): RemoveProductFromCartPayload
  updateProductInTheCart(input: UpdateProductInTheCartInput!): UpdateProductInTheCartPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Price {
  default: Float
  sale: Float
}

type Product implements Node {
  """The ID of an object"""
  id: ID!
  categoryId: Int
  category: ProductCategory
  quantity: Int
  price: Price
  name: String
  attributes: [String]
  image: String
  description: String
}

type ProductCategory implements Node {
  """The ID of an object"""
  id: ID!
  name: String
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge"""
  node: Product

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  viewer: User
  categories: CategoryConnection
  market: Market

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

input RemoveCompletedTodosInput {
  clientMutationId: String
}

type RemoveCompletedTodosPayload {
  deletedTodoIds: [String]
  viewer: User
  clientMutationId: String
}

input RemoveProductFromCartInput {
  productId: ID!
  clientMutationId: String
}

type RemoveProductFromCartPayload {
  item: CartItem
  market: Market
  clientMutationId: String
}

input RemoveTodoInput {
  id: ID!
  clientMutationId: String
}

type RemoveTodoPayload {
  deletedTodoId: ID
  viewer: User
  clientMutationId: String
}

input RenameTodoInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type RenameTodoPayload {
  todo: Todo
  clientMutationId: String
}

type Todo implements Node {
  """The ID of an object"""
  id: ID!
  text: String
  complete: Boolean
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge"""
  node: Todo

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateProductInTheCartInput {
  productId: ID!
  quantity: Int!
  append: Boolean = false
  clientMutationId: String
}

type UpdateProductInTheCartPayload {
  item: CartItem
  market: Market
  clientMutationId: String
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  todos(status: String = "any", after: String, first: Int, before: String, last: Int): TodoConnection
  totalCount: Int
  completedCount: Int
}
